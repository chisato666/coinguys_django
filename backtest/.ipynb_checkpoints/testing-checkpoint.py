{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "8b3e3944-9a32-4663-aacf-14d66e1829ac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[*********************100%***********************]  1 of 1 completed\n",
      "Date\n",
      "2022-01-22    2561.145264\n",
      "2022-09-19    1335.270752\n",
      "2022-11-10    1100.107178\n",
      "Name: Open, dtype: float64\n",
      "Date\n",
      "2022-07-17    1353.205078\n",
      "2022-10-26    1461.133179\n",
      "2023-01-05    1256.484619\n",
      "Name: Open, dtype: float64\n",
      "[-0.47164064  0.09425985  0.14214746]\n",
      "-0.3396532388249992\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import ta\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "class Backtest:\n",
    "    def __init__(self, symbol):\n",
    "        self.symbol = symbol\n",
    "        self.df = yf.download(self.symbol, start='2022-01-01')\n",
    "        if self.df.empty:\n",
    "            print('No data pulled')\n",
    "        else:\n",
    "            self.calc_indicators()\n",
    "            self.generate_signals()\n",
    "            self.loop_it()\n",
    "            self.profit=self.calc_profit()\n",
    "            self.max_dd= self.profit.min()\n",
    "            self.cumul_profit= (self.profit + 1).prod() - 1\n",
    "\n",
    "\n",
    "\n",
    "    def calc_indicators(self):\n",
    "        self.df['ma_20'] = self.df.Close.rolling(20).mean()\n",
    "        self.df['vol'] = self.df.Close.rolling(20).std()\n",
    "        self.df['upper_bb'] = self.df.ma_20 + (2 * self.df.vol)\n",
    "        self.df['lower_bb'] = self.df.ma_20 - (2 * self.df.vol)\n",
    "        self.df['rsi'] = ta.momentum.rsi(self.df.Close, window=6)\n",
    "        self.df.dropna(inplace=True)\n",
    "\n",
    "    def generate_signals(self):\n",
    "        conditions = [(self.df.rsi < 30) & (self.df.Close < self.df.lower_bb),\n",
    "                      (self.df.rsi > 70) & (self.df.Close > self.df.upper_bb)]\n",
    "        choices = ['Buy', 'Sell']\n",
    "        self.df['signal'] = np.select(conditions,choices)\n",
    "        self.df.signal=self.df.signal.shift()\n",
    "        self.df.dropna(inplace=True)\n",
    "\n",
    "    def loop_it(self):\n",
    "        position = False\n",
    "        buydates,selldates=[],[]\n",
    "        \n",
    "        for index, row in self.df.iterrows():\n",
    "            if not position and row['signal']== 'Buy':\n",
    "                position=True\n",
    "                buydates.append(index)\n",
    "            if position and row['signal']=='Sell':\n",
    "                position=False\n",
    "                selldates.append(index)\n",
    "        \n",
    "        self.buy_arr=self.df.loc[buydates].Open\n",
    "        self.sell_arr=self.df.loc[selldates].Open\n",
    "\n",
    "    def calc_profit(self):\n",
    "        if self.buy_arr.index[-1] > self.sell_arr.index[-1]:\n",
    "            self.buy_arr=self.buy_arr[:-1]\n",
    "        return (self.sell_arr.values - self.buy_arr.values)/self.buy_arr.values\n",
    "\n",
    "    def plot_chart(self):\n",
    "        plt.figure(figsize=(10,5))\n",
    "        plt.plot(self.df.Close)\n",
    "        plt.scatter(self.buy_arr.index,self.buy_arr.values,marker='^', c='g')\n",
    "        plt.scatter(self.sell_arr.index,self.sell_arr.values,marker='v', c='r')\n",
    "\n",
    "    \n",
    "instance = Backtest('ETH-USD')\n",
    "\n",
    "print(instance.buy_arr)\n",
    "\n",
    "print(instance.sell_arr)\n",
    "      \n",
    "print(instance.profit)\n",
    "\n",
    "print(instance.cumul_profit)\n",
    "\n",
    "instance.plot_chart()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "93ba2e17-486a-495b-ba0a-94bd19d3b6e2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8a1e7d58-1d89-4a69-9743-898d257d1a09",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d03a72cf-a635-4e00-99bd-af8b5fd2f1da",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "45fd7c98-3c0c-4a74-82e9-5370817ca275",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
